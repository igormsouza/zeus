<#@ template language="C#" debug="false" hostspecific="true"#>
<#@ include file="EF.Utility.CS.ttinclude"#>
<#@ import namespace="System.Xml.XPath" #><#

const string inputFile = @"..\..\..\Client.Zeus.Data\DataRepository.edmx";
var textTransform = DynamicTextTransformation.Create(this);
var code = new CodeGenerationTools(this);
//var ef = new MetadataTools(this);
var fileManager = EntityFrameworkTemplateFileManager.Create(this);

var loader = new MetadataLoader(this);
var itemCollection = loader.CreateEdmItemCollection(inputFile);
#>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Web.Mvc;
using Client.Zeus.Domain;
using Client.Zeus.Business;
using Client.Zeus.Util;
using System.Configuration;
using Client.Zeus.Domain.Base;
using System.Linq.Expressions;
using Client.Zeus.Business.Base;
using System.Reflection;
using Client.Zeus.Business.Manager;

namespace Client.Zeus.App.Controllers
{
    public partial class BaseController : Controller
    {
		#region [ Managers ]
<#
foreach (var entity in itemCollection.OfType<EntityType>().OrderBy(i => i.Name))
{
	var className = String.Join("", entity.Name.Replace("TB_", "")) ;
	className = CodigoCustomizadoTT.GeraNomeClasse(className) + "Manager";
#>

		private <#= className #> <#= className.ToLower() #>;
        public <#= className #> <#= className #>
        {
            get
            {
                if (this.<#= className.ToLower() #> == null)
                {
                    this.<#= className.ToLower() #> = new <#= className #>();
                }
                return this.<#= className.ToLower() #>;
            }
        }
<#
}
#>
		#endregion			
	}
}


<#+
public static class CodigoCustomizadoTT
{
	public static string SetaPrimeiraLetraMaiuscula(string valor, bool restoMinusculo = false)
    {
        string retorno = string.Empty;

        if (!string.IsNullOrWhiteSpace(valor))
        {
            retorno = valor.Substring(0, 1).ToUpper();

            if (restoMinusculo)
                retorno += valor.Substring(1).ToLower();
            else
                retorno += valor.Substring(1);
        }

        return retorno;
    }

    public static string EspacoEmBranco(int quantidade)
    {
        StringBuilder retorno = new StringBuilder();

        for (int i = 0; i < quantidade; i++)
        {
            retorno.Append(Environment.NewLine);
        }

        return retorno.ToString();
    }

    public static String GeraNomeClasse(string descricao)
    {
        descricao = descricao.Replace("TB_", "").Replace(".cs", "");

        string retorno = "";
        string[] aux = descricao.Split('_');

        int cont = 0;
        foreach (var item in aux)
        {
            if (item == "_")
                continue;

            retorno += SetaPrimeiraLetraMaiuscula(item, true);
            cont++;
        }

        retorno = AtualizaSiglas(retorno);
        return retorno;
    }

    public static string AtualizaSiglas(string retorno)
    {
        string aux = retorno.Replace("Uf", "UF");

        aux = aux.Replace("Cep", "CEP");
        aux = aux.Replace("Cnpj", "CNPJ");
        aux = aux.Replace("Cpf", "CPF");

        return aux;
    }
}

#>
